<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小薛薛</title>
  
  <subtitle>好事，总在下一个转弯</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-19T05:56:05.112Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小汤圆</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>温度服务及它的特性</title>
    <link href="http://yoursite.com/2020/06/19/%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%AE%83%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2020/06/19/%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%AE%83%E7%9A%84%E7%89%B9%E6%80%A7/</id>
    <published>2020-06-19T05:56:05.000Z</published>
    <updated>2020-06-19T05:56:05.112Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>服务特性</title>
    <link href="http://yoursite.com/2020/06/19/Led%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%AE%83%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2020/06/19/Led%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%AE%83%E7%9A%84%E7%89%B9%E6%80%A7/</id>
    <published>2020-06-19T01:08:50.000Z</published>
    <updated>2020-06-19T06:56:09.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>蓝牙当中有两个最基本的概念，一个是服务(Service),另一个特性(Characteris)</strong></p> <a id="more"></a><h2 id="一、查找BBC提供的LED服务"><a href="#一、查找BBC提供的LED服务" class="headerlink" title="一、查找BBC提供的LED服务"></a>一、查找BBC提供的LED服务</h2><p>首先打开Chrome浏览器里的<a href="chrome://bluetooth-internals/#adapter">网页</a>，并打开自带的蓝牙插件，在适配器的地方，可以发现功能运行正常，点击Device,扫描设备</p><p><img src="/picture/41.png" alt="41"></p><p>UUID类似于每个人的身份证号码，一定是唯一，表示某一个服务。</p><p>打开BBC板提供有关的蓝牙的各种服务的网站，<a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html" target="_blank" rel="noopener">点击链接</a>,出现如下界面：</p><p><img src="/picture/42.png" alt="42"></p><p>按住Ctrl+f，搜索 LED Service</p><p><img src="/picture/43.png" alt="43"></p><p>我们要找的特性一定是属于LED服务的，LED服务里面包含了几种特性，特性一，控制灯得亮和灭，特性二，控制灯开或者是关，或者是延时。</p><h2 id="二、网页蓝牙服务和特性的发现功能"><a href="#二、网页蓝牙服务和特性的发现功能" class="headerlink" title="二、网页蓝牙服务和特性的发现功能"></a>二、网页蓝牙服务和特性的发现功能</h2><p>首先扫描蓝牙设备，连接板子，点击配对，按F12，点击Consol，显示如下</p><p><img src="/picture/44.png" alt="44"></p><p>成功之后就会显示true，反之false</p><p><img src="/picture/45.png" alt="45"></p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><p>新增加discoverSvcsAndChars()的函数，用来发现服务和特性的，打印输出Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">function discoverSvcsAndChars()    &#x2F;&#x2F;在第5课基础上添加的函数</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); </span><br><span class="line">            connected_server.getPrimaryServices()</span><br><span class="line">            .then(services &#x3D;&gt; </span><br><span class="line">            &#123;    </span><br><span class="line">                    has_accelerometer_service &#x3D; false; &#x2F;&#x2F;是否发现服务   </span><br><span class="line">                    has_led_service &#x3D; false;    </span><br><span class="line">                    has_device_information_service &#x3D; false; </span><br><span class="line">        </span><br><span class="line">                    services_discovered &#x3D; 0;    </span><br><span class="line">                    service_count &#x3D; services.length;   &#x2F;&#x2F;一旦发现就有了值 </span><br><span class="line">                    console.log(&quot;Got &quot; + service_count + &quot; services&quot;); &#x2F;&#x2F;打印输出</span><br><span class="line">        </span><br><span class="line">                    services.forEach(service &#x3D;&gt; </span><br><span class="line">                    &#123;     </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE)</span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_accelerometer_service &#x3D; true;    </span><br><span class="line">                        &#125;     </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; LED_SERVICE) </span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_led_service &#x3D; true;     </span><br><span class="line">                        &#125;     </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) </span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_device_information_service &#x3D; true;     </span><br><span class="line">                        &#125;     </span><br><span class="line">                        console.log(&#39;Getting Characteristics for service &#39; + service.uuid);     </span><br><span class="line">                        service.getCharacteristics()</span><br><span class="line">                        .then(characteristics &#x3D;&gt; </span><br><span class="line">                        &#123;      </span><br><span class="line">                            console.log(&#39;&gt; Service: &#39; + service.uuid);      </span><br><span class="line">                            services_discovered++;     </span><br><span class="line">                            characteristics_discovered &#x3D; 0;      </span><br><span class="line">                            characteristic_count &#x3D; characteristics.length;      </span><br><span class="line">                            characteristics.forEach(characteristic &#x3D;&gt; </span><br><span class="line">                            &#123;       </span><br><span class="line">                                characteristics_discovered++;       </span><br><span class="line">                                console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid);       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA)</span><br><span class="line">                                &#123;        </span><br><span class="line">                                    accelerometer_data &#x3D; characteristic;        </span><br><span class="line">                                    has_accelerometer_data &#x3D; true;       </span><br><span class="line">                                &#125;       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    led_matrix_state &#x3D; characteristic;        </span><br><span class="line">                                    has_led_matrix_state &#x3D; true;       </span><br><span class="line">                                &#125;       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    model_number_string &#x3D; characteristic;        </span><br><span class="line">                                    has_model_name_string &#x3D; true;       </span><br><span class="line">                                &#125;       </span><br><span class="line">                                if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    console.log(&quot;FINISHED DISCOVERY&quot;); </span><br><span class="line">                                    setDiscoveryStatus(true);       </span><br><span class="line">                                    &#x2F;&#x2F;setDiscoveryStatus(true);                  </span><br><span class="line">                                &#125;      </span><br><span class="line">                            &#125;);     </span><br><span class="line">                        &#125;);    </span><br><span class="line">                    &#125;);  </span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>另外添加服务和特性UUID号  </p><pre><code>//在第5课上添加以下内容      // presence of services and characteristics       var has_accelerometer_service = false; //包含      var has_accelerometer_data = false;       var has_led_service = false;      var has_led_matrix_state = false; //特性本身      var has_device_information_service = false;       var has_model_name_string = false; // service UUIDs  ACCELEROMETER_SERVICE = &apos;e95d0753-251d-470a-a062-fa1922dfa9a8&apos;;  LED_SERVICE = &apos;e95dd91d-251d-470a-a062-fa1922dfa9a8&apos;;  DEVICE_INFORMATION_SERVICE = &apos;0000180a-0000-1000-8000-00805f9b34fb&apos;; // characteristic UUIDs  ACCELEROMETER_DATA = &apos;e95dca4b-251d-470a-a062-fa1922dfa9a8&apos;;  LED_MATRIX_STATE  = &apos;e95d7b77-251d-470a-a062-fa1922dfa9a8&apos;;  MODEL_NUMBER_STRING = &apos;00002a24-0000-1000-8000-00805f9b34fb&apos;;  // cached characteristics var accelerometer_data;   var led_matrix_state;   var model_number_string;   //   var service_count;   var services_discovered;   var characteristics_discovered;     var characteristic_count ; </code></pre><p>修改discoverDevices函数中的如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var options &#x3D; &#123;acceptAllDevices:true,</span><br><span class="line">               optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE]  &#x2F;&#x2F;在第5节课上添加</span><br><span class="line">           &#125;        &#x2F;&#x2F;发现所有周边蓝牙设备</span><br></pre></td></tr></table></figure><p>这样就完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;蓝牙当中有两个最基本的概念，一个是服务(Service),另一个特性(Characteris)&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>显示蓝牙设备</title>
    <link href="http://yoursite.com/2020/06/16/%E6%98%BE%E7%A4%BA%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/"/>
    <id>http://yoursite.com/2020/06/16/%E6%98%BE%E7%A4%BA%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/</id>
    <published>2020-06-16T10:19:23.000Z</published>
    <updated>2020-06-16T12:02:49.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>显示蓝牙设备并连接BBC板</p><a id="more"></a><h2 id="一、确认本机是否安装蓝牙"><a href="#一、确认本机是否安装蓝牙" class="headerlink" title="一、确认本机是否安装蓝牙"></a>一、确认本机是否安装蓝牙</h2><p>方法一：在桌面开始按钮旁的搜索栏中输入bluetooth，回车，看蓝牙是否打开</p><p>方法二：在chrome浏览器中的地址中输入<strong>chrome://bluetooth-internals</strong>，看是否发现周边蓝牙设备。</p><h2 id="二、检查本机系统、Chrome浏览器的版本"><a href="#二、检查本机系统、Chrome浏览器的版本" class="headerlink" title="二、检查本机系统、Chrome浏览器的版本"></a>二、检查本机系统、Chrome浏览器的版本</h2><p>1、Chrome版本在70.0.3526.0及以上。</p><p>2、Windows 10的版本在1703以上。</p><p><img src="/picture/35.png" alt="35"></p><h2 id="三、下载固件至开发板"><a href="#三、下载固件至开发板" class="headerlink" title="三、下载固件至开发板"></a>三、下载固件至开发板</h2><p><a href="https://makecode.microbit.org/v0/89975-20684-84568-20127" target="_blank" rel="noopener">点击下载</a></p><p><img src="/picture/36.png" alt="36"></p><p>下载完成之后得到<strong>microbit-SIG-web-bluetooth-tutorial.hex</strong>文件，将这个文件拖到盘符中，当蓝牙连接成功后会显示C，断开连接会显示D</p><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>打开<strong>chrome://bluetooth-internals</strong>网页</p><p><img src="/picture/38.png" alt="38"></p><p>选择<strong>Devices</strong></p><p><img src="/picture/37.png" alt="37"></p><p>点击<strong>Start Scan</strong>，查找设备</p><p><img src="/picture/39.png" alt="39"></p><p>选择自己BBC设备 ，点击Inspect,板子会显示C就说明电脑端和板子运行正常。</p><h2 id="五、扫描周边设备"><a href="#五、扫描周边设备" class="headerlink" title="五、扫描周边设备"></a>五、扫描周边设备</h2><p>在html中，输入代码，添加入discoverDevices()来扫描周边的设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function discoverDevices()</span><br><span class="line">        &#123; </span><br><span class="line">            console.log(&quot;discoverDevices&quot;);</span><br><span class="line">            var options &#x3D; &#123;acceptallDevices:true&#125;       &#x2F;&#x2F;发现所有周边蓝牙设备</span><br><span class="line">           </span><br><span class="line">            navigator.bluetooth.requestDevice(options)</span><br><span class="line">            .then(device &#x3D;&gt; &#123;</span><br><span class="line">                console.log(&#39;&gt; Name:&#39; + device.name);</span><br><span class="line">                console.log(&#39;&gt; Id:&#39; + device.id);</span><br><span class="line">                console.log(&#39;&gt; Connected:&#39; + device.gatt.connected);</span><br><span class="line">                selected_device &#x3D; device;</span><br><span class="line">                console.log(selected_device);</span><br><span class="line">                connect();</span><br><span class="line">                &#125;)</span><br><span class="line">            .catch(error &#x3D;&gt; &#123;</span><br><span class="line">                alert(&#39;ERROR&#39; +error);</span><br><span class="line">                console.log(&#39;ERROR&#39; +error);</span><br><span class="line">                &#125;);       </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在body中加入一个按键，用来点击调用discoverDevices()函数</p><pre><code>&lt;h2&gt;         Device Discovery or Disconnect     &lt;/h2&gt;     &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverDevices()&quot;&gt;Start scan&lt;/button&gt;</code></pre><p>这样就可以扫描设备了</p><p><img src="/picture/40.png" alt="40"></p><h2 id="六、连接蓝牙设备"><a href="#六、连接蓝牙设备" class="headerlink" title="六、连接蓝牙设备"></a>六、连接蓝牙设备</h2><p>在源代码中加入一个connect()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function connect()</span><br><span class="line">    &#123;</span><br><span class="line">        console.log(&quot;connecting&quot;);</span><br><span class="line">        selected_device.gatt.connect()</span><br><span class="line">        .then(</span><br><span class="line">            function (server)</span><br><span class="line">            &#123;</span><br><span class="line">                console.log(&quot;Connected to&quot; + server.device.id);</span><br><span class="line">                console.log(&quot;Connected &quot; + server.connected);</span><br><span class="line">                selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected);</span><br><span class="line">                connected_server &#x3D;server;</span><br><span class="line">                setConnectedStatus(true);</span><br><span class="line">            &#125;,</span><br><span class="line">            function (error)</span><br><span class="line">            &#123;</span><br><span class="line">                console.log(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">               alert(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">               setConnectedStatus(false);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>elected_device来保存用户选择的蓝牙设备</p><p>connected_serve保存用户连接的蓝牙设备</p><p>connected=false保存电脑蓝牙的当前连接设备</p><p>将.html文件已Chrome的方式打开，与板子连接，显示C</p><h2 id="七、连接和断开蓝牙设备"><a href="#七、连接和断开蓝牙设备" class="headerlink" title="七、连接和断开蓝牙设备"></a>七、连接和断开蓝牙设备</h2><p>在源代码中添加setConnectedStatus()函数，用来改变按钮所显示文字和表格中是否连接的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function setConnectedStatus(status)</span><br><span class="line">           &#123;</span><br><span class="line">               connected&#x3D;status;</span><br><span class="line">               document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status;</span><br><span class="line">               if(status&#x3D;&#x3D;true)</span><br><span class="line">               &#123;</span><br><span class="line">                   document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;;</span><br><span class="line">               &#125;</span><br><span class="line">               else</span><br><span class="line">               &#123;</span><br><span class="line">                   document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>counnect函数中要做如下要修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function connect()</span><br><span class="line">            &#123;</span><br><span class="line">                console.log(&quot;connecting&quot;);</span><br><span class="line">                selected_device.gatt.connect()</span><br><span class="line">                .then(</span><br><span class="line">                    function(server)                            &#x2F;&#x2F;表示连接成功</span><br><span class="line">                    &#123;</span><br><span class="line">                        console.log(&quot;Connected to&quot; + server.device.id);</span><br><span class="line">                        console.log(&quot;Connected&#x3D;&quot; + server.connected);</span><br><span class="line">                        connected_server &#x3D; server;</span><br><span class="line">                        setConnectedStatus(true);</span><br><span class="line">                          &#125;,</span><br><span class="line">                    function(error)                              &#x2F;&#x2F;表示连接失败</span><br><span class="line">                    &#123;</span><br><span class="line">                        console.log(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">                        alert(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">                        setConnectedStatus(false);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>总代码如下：</p><pre><code> &lt;html&gt;    &lt;head&gt;        &lt;script&gt;            var selected_device;                      var connected_server;                      var connected=false;                        function discoverDevices()            {                console.log(&quot;discoverDevices&quot;);                     var options = {acceptAllDevices:true}                        navigator.bluetooth.requestDevice(options)                     .then(device =&gt; {                    console.log(&apos;&gt; Name:        &apos; + device.name);                    console.log(&apos;&gt; Id:          &apos; + device.id);                    console.log(&apos;&gt; Connected:   &apos; + device.gatt.connected);                    selected_device = device;                    console.log(selected_device);                    connect();                  })                .catch(error =&gt;{                    alert(&apos;ERROR:&apos; +error);                    console.log(&apos;ERROR:&apos; +error);                });            }            function connect()            {                console.log(&quot;connecting&quot;);                selected_device.gatt.connect()                .then(                    function(server)                            //表示连接成功                    {                        console.log(&quot;Connected to&quot; + server.device.id);                        console.log(&quot;Connected=&quot; + server.connected);                        connected_server = server;                        setConnectedStatus(true);                    },                    function(error)                              //表示连接失败                    {                        console.log(&quot;ERROR:could not connct-&quot; + error);                        alert(&quot;ERROR:could not connct-&quot; + error);                        setConnectedStatus(false);                    }                );            }            function setConnectedStatus(status)            {                connected=status;                document.getElementById(&apos;status_connected&apos;).innerHTML=status;                if(status==true)                {                    document.getElementById(&apos;btn_scan&apos;).innerHTML=&quot;Disconnect&quot;;                }                else                {                    document.getElementById(&apos;btn_scan&apos;).innerHTML=&quot;Discover Devices&quot;;                }            }        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;               &lt;h2&gt;            Status  &lt;!-- 显示蓝牙状态--&gt;        &lt;/h2&gt;        &lt;table border=&quot;1&quot;&gt;            &lt;tr&gt;                &lt;td&gt;    &lt;b&gt;Connected&lt;/b&gt;    &lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td id=&quot;status_connected&quot;&gt;False&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;         &lt;h2&gt;Device Discovery &lt;/h2&gt;     &lt;!-- 扫描/发现蓝牙设备 --&gt;        &lt;button id=&quot;btn_scan&quot; onclick=&quot;discoverDevices()&quot;&gt;            Start scan        &lt;/button&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>加载到板子上就可以连接和断开板子了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;显示蓝牙设备并连接BBC板&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于域名</title>
    <link href="http://yoursite.com/2020/05/21/%E5%85%B3%E4%BA%8E%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2020/05/21/%E5%85%B3%E4%BA%8E%E5%9F%9F%E5%90%8D/</id>
    <published>2020-05-21T06:18:35.000Z</published>
    <updated>2020-05-21T07:12:16.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>域名（Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</strong><br><strong>域名是一个网站最重要的虚拟资产，相当于现实生活中的门牌号。</strong></p><p><strong><a id="more"></a></strong></p><p>我是选择在腾讯云购买域名，因为感觉便宜</p><h3 id="一、首先点击腾讯云官网，选择所需购买的"><a href="#一、首先点击腾讯云官网，选择所需购买的" class="headerlink" title="一、首先点击腾讯云官网，选择所需购买的"></a>一、首先点击<a href="https://cloud.tencent.com/act/domainsales?fromSource=gwzcw.2731171.2731171.2731171&utm_medium=cpc&utm_id=gwzcw.2731171.2731171.2731171" target="_blank" rel="noopener">腾讯云官网</a>，选择所需购买的</h3><p><img src="/picture/12.png" alt="12"></p><p>之后注册，完成购买（买的时候正好做活动，只需3元）</p><p><img src="/picture/13.png" alt="13"></p><h3 id="二、完成购买后，等待域名审核"><a href="#二、完成购买后，等待域名审核" class="headerlink" title="二、完成购买后，等待域名审核"></a>二、完成购买后，等待域名审核</h3><p><img src="/picture/14.png" alt="14"></p><h3 id="三、成功之后开始解析"><a href="#三、成功之后开始解析" class="headerlink" title="三、成功之后开始解析"></a>三、成功之后开始解析</h3><p>1、点击右上角控制台</p><p><img src="/picture/15.png" alt="15"></p><p>2、点击域名管理</p><p><img src="/picture/16.png" alt="16"></p><p>3、点击解析</p><p><img src="/picture/17.png" alt="17"></p><p>4、进入解析界面，添加记录，将记录值改成自己的blog仓库值</p><p><img src="/picture/18.png" alt="18"></p><h3 id="四、解析成功后，打开blog下source文件夹，在里面新建CNAME的文件，将刚刚购买的输入进去即可"><a href="#四、解析成功后，打开blog下source文件夹，在里面新建CNAME的文件，将刚刚购买的输入进去即可" class="headerlink" title="四、解析成功后，打开blog下source文件夹，在里面新建CNAME的文件，将刚刚购买的输入进去即可"></a>四、解析成功后，打开blog下source文件夹，在里面新建CNAME的文件，将刚刚购买的输入进去即可</h3><p><img src="/picture/19.png" alt="19"></p><h3 id="五、最后，hexo-clean、hexo-g、hexo-d重新部署一下就OK了。"><a href="#五、最后，hexo-clean、hexo-g、hexo-d重新部署一下就OK了。" class="headerlink" title="五、最后，hexo clean、hexo g、hexo d重新部署一下就OK了。"></a>五、最后，hexo clean、hexo g、hexo d重新部署一下就OK了。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;域名（Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;域名是一个网站最重要的虚拟资产，相当于现实生活中的门牌号。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Next主题</title>
    <link href="http://yoursite.com/2020/03/26/Next%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2020/03/26/Next%E4%B8%BB%E9%A2%98/</id>
    <published>2020-03-26T15:46:58.000Z</published>
    <updated>2020-05-23T09:25:04.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h5 id="Everything-comes-to-him-who-waits！！！"><a href="#Everything-comes-to-him-who-waits！！！" class="headerlink" title="Everything comes to him who waits！！！"></a>Everything comes to him who waits！！！</h5><p>Hexo 博客搭建完成之后选择主题时，我选的next主题（个人觉得这个主题很清爽），以下是我选用此主题时的一些功能介绍以及遇到问题时的解决措施，希望对你有帮助~~</p><a id="more"></a><h2 id="一、Next主题的安装配置"><a href="#一、Next主题的安装配置" class="headerlink" title="一、Next主题的安装配置"></a>一、Next主题的安装配置</h2><p>在博客主目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>然后设置站点配置文件_config.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>注：当时用这个方法的时候，总是不对出现以下错误</p><p><img src="/picture/1.jpg" alt="1"></p><p>然后去百度寻求解决方法，方法如下：</p><p>1、查看当前配置命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure><p>2、httpBuffer加大  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure><p>3、压缩配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.compression -1</span><br></pre></td></tr></table></figure><p>4、修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GIT_TRACE_PACKET&#x3D;1export</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_34121797/java/article/details/79561110" target="_blank" rel="noopener">https://blog.csdn.net/qq_34121797/java/article/details/79561110</a></p><h5 id="另一种next主题安装方法"><a href="#另一种next主题安装方法" class="headerlink" title="另一种next主题安装方法"></a>另一种next主题安装方法</h5><p>去官网下载稳定版本</p><p><img src="/picture/2.png" alt="2"></p><p><img src="/picture/3.png" alt="3"></p><p><img src="/picture/4.png" alt="4"></p><p><img src="/picture/5.png" alt="5"></p><p><img src="/picture/6.png" alt="6"></p><p>以上方法经本人验证推荐使用</p><h5 id="Next主题风格："><a href="#Next主题风格：" class="headerlink" title="Next主题风格："></a>Next主题风格：</h5><p>Next提供了四中主题风格scheme，可以在主题配置文件blog/themes/next/_config.yml文件中进行选择，分别是Muse、Mist、Pisces、Gemini</p><h2 id="二、鼠标点击特效"><a href="#二、鼠标点击特效" class="headerlink" title="二、鼠标点击特效"></a>二、鼠标点击特效</h2><p>具体步骤如下：在<code>/themes/next/source/js/src</code>下新建文件 clicklove.js ，接着把下面的代码拷贝粘贴到 clicklove.js 文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;src&#x2F;clicklove.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="三、添加动态背景"><a href="#三、添加动态背景" class="headerlink" title="三、添加动态背景"></a>三、添加动态背景</h2><p>在主题配置文件中找到<strong>canvas_nest: false</strong>，修改为<strong>canvas_nest: true</strong>即可。</p><h2 id="四、加入网易云音乐"><a href="#四、加入网易云音乐" class="headerlink" title="四、加入网易云音乐"></a>四、加入网易云音乐</h2><p>首先在网页搜索网易云音乐，选择音乐，并生成外链：</p><p><img src="/picture/7.png" alt="7"></p><p>然后得到外链html代码：</p><p><img src="/picture/8.png" alt="8"></p><p>将代码粘贴到一个合适的位置，建议放在侧边栏，在<code>Blog/themes/next/layout/_macro/sidebar.swig</code>文件下，选择位置复制进去，不同位置效果不同</p><h2 id="五、评论功能"><a href="#五、评论功能" class="headerlink" title="五、评论功能"></a>五、评论功能</h2><p>我用的是valine（个人感觉nice）</p><p>首先<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">点击注册</a></p><p><img src="/picture/9.png" alt="9"></p><p>注册之后创建一个应用，然后然后 <strong>进入应用</strong> 打开 <strong>设置</strong> 点开 <strong>应用Key</strong></p><p><img src="/picture/10.png" alt="10"></p><p>复制 <strong>appid</strong>和<strong>appkey</strong>之后打开主题配置文件 <em>_config.yml</em> 搜索<strong>valine</strong>填入</p><p><img src="/picture/11.png" alt="11">配置文件更改完之后效果就有了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h5 id=&quot;Everything-comes-to-him-who-waits！！！&quot;&gt;&lt;a href=&quot;#Everything-comes-to-him-who-waits！！！&quot; class=&quot;headerlink&quot; title=&quot;Everything comes to him who waits！！！&quot;&gt;&lt;/a&gt;Everything comes to him who waits！！！&lt;/h5&gt;&lt;p&gt;Hexo 博客搭建完成之后选择主题时，我选的next主题（个人觉得这个主题很清爽），以下是我选用此主题时的一些功能介绍以及遇到问题时的解决措施，希望对你有帮助~~&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何建立博客</title>
    <link href="http://yoursite.com/2020/03/26/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/03/26/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-03-26T08:14:40.000Z</published>
    <updated>2020-06-01T13:50:10.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。其中的差别，有点意思。hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。</strong></p><a id="more"></a><h2 id="一、博客的本地搭建"><a href="#一、博客的本地搭建" class="headerlink" title="一、博客的本地搭建"></a>一、博客的本地搭建</h2><h5 id="1、点击安装Node-js"><a href="#1、点击安装Node-js" class="headerlink" title="1、点击安装Node.js"></a>1、点击安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a></h5><p><img src="/picture/21.png" alt="21"></p><p>一路next即可</p><h5 id="2、安装git，选择最新版本的Windows版本"><a href="#2、安装git，选择最新版本的Windows版本" class="headerlink" title="2、安装git，选择最新版本的Windows版本"></a>2、安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a>，选择最新版本的Windows版本</h5><p><img src="/picture/22.png" alt="22"></p><p>一路next即可</p><h5 id="3、测试node-js和git是否安装成功，在cmd中输入node-v、npm-v和git-v显示其版本号即为安装成功"><a href="#3、测试node-js和git是否安装成功，在cmd中输入node-v、npm-v和git-v显示其版本号即为安装成功" class="headerlink" title="3、测试node.js和git是否安装成功，在cmd中输入node -v、npm -v和git -v显示其版本号即为安装成功"></a>3、测试node.js和git是否安装成功，在cmd中输入node -v、npm -v和git -v显示其版本号即为安装成功</h5><p><img src="/picture/23.png" alt="23"></p><h5 id="4、安装hexo"><a href="#4、安装hexo" class="headerlink" title="4、安装hexo"></a>4、安装hexo</h5><p>在<strong>cmd</strong>或者<strong>Git Bash Here</strong>输入<strong>npm install hexo-cli -g</strong></p><p>在<strong>cmd</strong>输入<strong>hexo -v</strong>检测hexo是否安装成功，如果能看到版本号安装成功</p><p><img src="/picture/25.png" alt="25"></p><h5 id="5、创建Hexo博客"><a href="#5、创建Hexo博客" class="headerlink" title="5、创建Hexo博客"></a>5、创建Hexo博客</h5><p>在cmd中输入<strong>md blog</strong>，blog文件夹用来保存博客的所有内容，然后再输入<strong>cd blog</strong>，打开blog文件夹</p><h5 id="6、初始化博客"><a href="#6、初始化博客" class="headerlink" title="6、初始化博客"></a>6、初始化博客</h5><p>在<strong>cmd</strong>输入<strong>hexo init</strong>,出现“<u>Start blogging with Hexo!</u>”就说明，初始化成功</p><h5 id="7、本地预览"><a href="#7、本地预览" class="headerlink" title="7、本地预览"></a>7、本地预览</h5><p>在<strong>cmd</strong>中输入<strong>hexo s</strong>,就会出现<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> .</p><p><img src="/picture/26.png" alt="26"></p><h2 id="二、新建博文"><a href="#二、新建博文" class="headerlink" title="二、新建博文"></a>二、新建博文</h2><p>点击下载<a href="https://www.typora.io/" target="_blank" rel="noopener">Markdown开发工具</a></p><h5 id="1、在站点根目录（blog-）下新建scripts目录，然后再新建auto-open-js，在文件中填入以下内容："><a href="#1、在站点根目录（blog-）下新建scripts目录，然后再新建auto-open-js，在文件中填入以下内容：" class="headerlink" title="1、在站点根目录（blog\）下新建scripts目录，然后再新建auto_open.js，在文件中填入以下内容："></a>1、在站点根目录（<code>blog\</code>）下新建<code>scripts</code>目录，然后再新建<code>auto_open.js</code>，在文件中填入以下内容：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 2.x 用户复制这段 </span></span><br><span class="line"><span class="comment">//hexo.on('new', function(path)&#123;</span></span><br><span class="line">     <span class="comment">//spawn('start "markdown编辑器绝对路径.exe" ' + path); </span></span><br><span class="line"><span class="comment">//&#125;); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段 </span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; </span><br><span class="line">    spawn(<span class="string">'start "D:\Program Files\Typorae\Typora.exe" '</span> + data.path); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="2、新建一篇博文"><a href="#2、新建一篇博文" class="headerlink" title="2、新建一篇博文"></a>2、新建一篇博文</h5><p>输入 <strong>hexo new “filename”</strong>（其中filename可以用你喜欢的博文名字替代）</p><h5 id="3、查看新博文"><a href="#3、查看新博文" class="headerlink" title="3、查看新博文"></a>3、查看新博文</h5><p>输入<strong>hexo clean</strong>（清除旧数据） 、<strong>hexo g</strong>（生成新数据 ）、<strong>hexo d</strong>（启动）</p><h2 id="三、Hexo-博客乔迁Github之旅"><a href="#三、Hexo-博客乔迁Github之旅" class="headerlink" title="三、Hexo 博客乔迁Github之旅"></a>三、Hexo 博客乔迁Github之旅</h2><h5 id="1、注册Github，点击Github，选择右上角的Sign-up注册，开始填写"><a href="#1、注册Github，点击Github，选择右上角的Sign-up注册，开始填写" class="headerlink" title="1、注册Github，点击Github，选择右上角的Sign up注册，开始填写"></a>1、注册Github，点击<a href="https://github.com/" target="_blank" rel="noopener">Github</a>，选择右上角的Sign up注册，开始填写</h5><p><img src="/picture/27.png" alt="27"></p><h5 id="2、在Github下新建仓库，在下方输入"><a href="#2、在Github下新建仓库，在下方输入" class="headerlink" title="2、在Github下新建仓库，在下方输入"></a>2、在Github下新建仓库，在下方输入</h5><p><img src="/picture/28.jpg" alt="28"></p><p>仓库名称必须写为username.github.io 其中username是你注册Github使用的用户名。<br>建好仓库后，在Settings中Github Pages这一部分要出现Your site is published at<a href="https://username.github.io/" target="_blank" rel="noopener">https://username.github.io</a> 字样,表明仓库具备了网页展示功能。</p><p><img src="/picture/30.png" alt="30"></p><h5 id="3、配置ssh密钥"><a href="#3、配置ssh密钥" class="headerlink" title="3、配置ssh密钥"></a>3、配置ssh密钥</h5><p>在Git Bash Here输入ssh-keygen -t rsa -C “<a href="mailto:youremail@youremail.com">youremail@youremail.com</a>“</p><p>执行这条命令会提示文件保存路径，可以直接按Enter即可,然后会在 .ssh 目录生产两个文件：id_rsa和id_rsa.pub。<br>用记事本打开.ssh目录下的id_rsa.pub文件，复制里面的内容，复制到Github中(点击右上角的头像-&gt;Settings-&gt;SSH and GPG keys-&gt;New SSH key)<br><a href="http://www.twtnuk.top/assets/t.png" target="_blank" rel="noopener">  </a></p><p><img src="/picture/32.png" alt="32"></p><h5 id="4、绑定Hexo和Github"><a href="#4、绑定Hexo和Github" class="headerlink" title="4、绑定Hexo和Github"></a>4、绑定Hexo和Github</h5><h6 id="（1-修改本地站点配置文件"><a href="#（1-修改本地站点配置文件" class="headerlink" title="（1).修改本地站点配置文件"></a>（1).修改本地站点配置文件</h6><p>​    打开blog下的_config.yml，在后面添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">      type:  git</span><br><span class="line">      repo: git<span class="meta">@github</span>.com:username/username.github.io.git</span><br><span class="line">      branch:  master</span><br></pre></td></tr></table></figure><h6 id="2-绑定hexo和Github"><a href="#2-绑定hexo和Github" class="headerlink" title="(2).绑定hexo和Github"></a>(2).绑定hexo和Github</h6><p>   在cmd中输入<strong>npm install hexo-deployer-git –save</strong>,如果能看到版本号，则说明安装成功。</p><h6 id="3-上传hexo"><a href="#3-上传hexo" class="headerlink" title="(3).上传hexo"></a>(3).上传hexo</h6><p>   在cmd中输入<strong>hexo d</strong>上传hexo</p><h2 id="五、上传图片"><a href="#五、上传图片" class="headerlink" title="五、上传图片"></a>五、上传图片</h2><p>点击文件里面偏好设置，选择图像，改一下图片路径</p><p><img src="/picture/33.png" alt="33"></p><p>之后选择格式-图像-设置图片根目录，里面讲图片的位置加进去就可以了</p><p><img src="/picture/34.png" alt="34"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。其中的差别，有点意思。hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>The light of hope</title>
    <link href="http://yoursite.com/2020/03/26/The%20light%20of%20hope/"/>
    <id>http://yoursite.com/2020/03/26/The%20light%20of%20hope/</id>
    <published>2020-03-26T01:36:13.000Z</published>
    <updated>2020-06-19T03:18:49.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h5 id="不做等人接的小宝贝，做自己踩油门的小仙女，冲鸭"><a href="#不做等人接的小宝贝，做自己踩油门的小仙女，冲鸭" class="headerlink" title="不做等人接的小宝贝，做自己踩油门的小仙女，冲鸭~~"></a>不做等人接的小宝贝，做自己踩油门的小仙女，冲鸭~~</h5><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Where there<span class="string">'s a will, there'</span>s a way</span><br></pre></td></tr></table></figure><p>好好吃饭 好好睡觉</p><p>好好让自己变优秀</p><p>心里的垃圾定期倒一倒</p><p>什么事情都会过去的 加油~~</p><p><img src="/picture/123.jpg" alt="123"></p><p><img src="/picture/xty.jpg" alt="xty"></p><p><img src="/picture/ger.jpg" alt="ger"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h5 id=&quot;不做等人接的小宝贝，做自己踩油门的小仙女，冲鸭&quot;&gt;&lt;a href=&quot;#不做等人接的小宝贝，做自己踩油门的小仙女，冲鸭&quot; class=&quot;headerlink&quot; title=&quot;不做等人接的小宝贝，做自己踩油门的小仙女，冲鸭~~&quot;&gt;&lt;/a&gt;不做等人接的小宝贝，做自己踩油门的小仙女，冲鸭~~&lt;/h5&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/25/hello-world/"/>
    <id>http://yoursite.com/2020/03/25/hello-world/</id>
    <published>2020-03-25T15:27:47.105Z</published>
    <updated>2020-03-25T15:27:47.106Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
